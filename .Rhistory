calcium <- c(-5,-4,-3,-2,1,7,10,11,17,18)
median(calcium)
mean(c(-1,4))
9/15
install.packages("R.matlab")
install.packages("KernSmooth")
library(KernSmooth)
cube <- function(x, n) {
x^3
}
cube(3)
?list.files
list.files("C:/Users/Jason/Documents/GitHub/Coursera_RProgramming/specdata")
directory <- "C:/Users/Jason/Documents/GitHub/Coursera_RProgramming/specdata"
filelist <- list.files(directory)
read.table <- (filelist[1])
read.table(filelist[1])
read.table(directory,filelist[1])
filelist[1]
read.csv(directory,filelist[1])
install.packages("swirl")
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect(c(0.5,55,-10,6))
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Jason")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
c(x[x==3|x==5|x==7])
odd <- c(3,5,7)
x[x == c(3,5,7)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
set.seed(1)
rpois(5, 2)
?ppois
?qpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
plot(y)
system.time()
setwd("~/GitHub/RProgramming3/")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
# Simple Histogram
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
head(outcome)
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTrimmed <- outcomeData[,c(2,7,11,17,23)]
head(outcomeTrimmed)
names(outcomeTrimmed) <- c("HospitalName","State","HeartAttack","HeartFailure","Pneumonia")
head(outcomeTrimmed)
outcomeTrimmed$HeartAttack <- as.numeric(outcomeTrimmed$HeartAttack)
outcomeTrimmed$HeartFailure <- as.numeric(outcomeTrimmed$HeartFailure)
outcomeTrimmed$Pneumonia <- as.numeric(outcomeTrimmed$Pneumonia)
head(outcomeTrimmed)
length(outcomeTrimmed$State[State=="AL"])
length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"])
length(outcomeTrimmed$State[outcomeTrimmed$State=="BB"])
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="BB"]) > 0) {
}
else {
stop("invalid state")
}
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="BB"]) > 0) {
"awesome"
}
else {
stop("invalid state")
}
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="BB"]) > 0) {
"awesome"
}
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}
else {
stop("invalid state")
}
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}
else {
#stop("invalid state")
}
if (i == 1) {
alldata <- curfile
}
else {
alldata <- rbind(curfile,alldata)
}
outcomeTrimmed$Pneumonia <- as.numeric(outcomeTrimmed$Pneumonia)
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}
else {
#stop("invalid state")
}
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}
else {
"notawesome"
#stop("invalid state")
}
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}
else {
"notawesome"
#stop("invalid state")
}
"done"
ifelse (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
ifelse (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}
else {
"notawesome"
#stop("invalid state")
}
"done"
## Check that state and outcome are valid
ifelse (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}  else {
"notawesome"
#stop("invalid state")
}
"done"
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="AL"]) > 0) {
"awesome"
}  else {
"notawesome"
#stop("invalid state")
}
"done"
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="BB"]) > 0) {
"awesome"
}  else {
stop("invalid state")
}
"done"
return(stop("invalid state"))
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="BB"]) = 0) {
return(stop("invalid state"))
}
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State=="BB"]) = 0) {
return(stop("invalid state"))  }
state <- "BB"
outcome <- "heart attack"
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTrimmed <- outcomeData[,c(2,7,11,17,23)]
names(outcomeTrimmed) <- c("HospitalName","State","HeartAttack","HeartFailure","Pneumonia")
outcomeTrimmed$HeartAttack <- as.numeric(outcomeTrimmed$HeartAttack)
outcomeTrimmed$HeartFailure <- as.numeric(outcomeTrimmed$HeartFailure)
outcomeTrimmed$Pneumonia <- as.numeric(outcomeTrimmed$Pneumonia)
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State==state]) = 0) {
return(stop("invalid state"))  }
if (length(outcomeTrimmed$State[outcomeTrimmed$State==state]) == 0) {
return(stop("invalid state"))  }
state <- "BB"
outcome <- "heart attack"
if (outcome != 'heart attack' && outcome != 'heart failure' && outcome != 'pneumonia') {
return(stop("invalid outcome"))
if (outcome != 'heart attack' && outcome != 'heart failure' && outcome != 'pneumonia') {
return(stop("invalid outcome"))
outcome
return(stop("invalid outcome"))
hello
print()
;
end
stop
stop()
quit
bye
bye()
quit()
outcome <- "heart attack"
}
{}
{}
state <- "AL"
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State==state]) == 0) {
return(stop("invalid state"))  }
if (outcome != 'heart attack' && outcome != 'heart failure' && outcome != 'pneumonia') {
return(stop("invalid outcome"))
}
"yay"
outcome <- "hert attack"
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State==state]) == 0) {
return(stop("invalid state"))  }
if (outcome != 'heart attack' && outcome != 'heart failure' && outcome != 'pneumonia') {
return(stop("invalid outcome"))
}
"yay"
outcomeTrimmed <- subset(outcomeTrimmed, State == state)
head(outcomeTrimmed)
outcomeTrimmed[order(outcomeTrimmed$HeartAttack)]
outcomeTrimmed[order(outcomeTrimmed$HeartAttack),]
outcomeTrimmed[order(outcomeTrimmed$HeartAttack),1]
outcomeTrimmed[order(outcomeTrimmed$HeartAttack),]
subset(outcomeTrimmed, is.na(HeartAttack) == F
)
outcomeTrimmed[order(outcomeTrimmed$HeartAttack),]
outcomeTrimmed <- na.omit(outcomeTrimmed)
outcomeTrimmed[order(outcomeTrimmed$HeartAttack),]
outcomeTrimmed[c(1,2,3),]
outcomeTrimmed[,c(1,2,3)]
outcomeTrimmed[order(outcomeTrimmed$HeartAttack,outcomeTrimmed$HospitalName),]
outcomeTrimmed <- outcomeTrimmed[,c(1,2,3)]
outcomeTrimmed <- na.omit(outcomeTrimmed)
outcomeTrimmed[order(outcomeTrimmed$HeartAttack,outcomeTrimmed$HospitalName),]
return(outcomeTrimmed$HospitalName[1,])
return(outcomeTrimmed$HospitalName[1,1])
return(outcomeTrimmed[1,1])
outcomeTrimmed[1,1]
outcomeTrimmed <- outcomeTrimmed[order(outcomeTrimmed$HeartAttack,outcomeTrimmed$HospitalName),]
return(outcomeTrimmed[1,1])
outcomeTrimmed[1,1]
state <- "AL"
outcome <- "heart attack"
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTrimmed <- outcomeData[,c(2,7,11,17,23)]
names(outcomeTrimmed) <- c("HospitalName","State","HeartAttack","HeartFailure","Pneumonia")
outcomeTrimmed$HeartAttack <- as.numeric(outcomeTrimmed$HeartAttack)
outcomeTrimmed$HeartFailure <- as.numeric(outcomeTrimmed$HeartFailure)
outcomeTrimmed$Pneumonia <- as.numeric(outcomeTrimmed$Pneumonia)
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State==state]) == 0) {
return(stop("invalid state"))  }
if (outcome != 'heart attack' && outcome != 'heart failure' && outcome != 'pneumonia') {
return(stop("invalid outcome"))
}
head(outcomeTrimmed)
outcomeTrimmed <- subset(outcomeTrimmed, State == state)
if (outcome == 'heart attack') {
outcomeTrimmed <- outcomeTrimmed[,c(1,2,3)]
outcomeTrimmed <- na.omit(outcomeTrimmed)
outcomeTrimmed <- outcomeTrimmed[order(outcomeTrimmed$HeartAttack,outcomeTrimmed$HospitalName),]
return(outcomeTrimmed[1,1])
}
if (outcome == 'heart failure') {
outcomeTrimmed <- outcomeTrimmed[,c(1,2,4)]
outcomeTrimmed <- na.omit(outcomeTrimmed)
outcomeTrimmed <- outcomeTrimmed[order(outcomeTrimmed$HeartFailure,outcomeTrimmed$HospitalName),]
return(outcomeTrimmed[1,1])
}
if (outcome == 'pneumonia') {
outcomeTrimmed <- outcomeTrimmed[,c(1,2,5)]
outcomeTrimmed <- na.omit(outcomeTrimmed)
outcomeTrimmed <- outcomeTrimmed[order(outcomeTrimmed$Pneumonia,outcomeTrimmed$HospitalName),]
return(outcomeTrimmed[1,1])
}
best <- function(state, outcome) {
#fortesting  state <- "AL"
#fortesting  outcome <- "heart attack"
## Read outcome data
outcomeData <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcomeTrimmed <- outcomeData[,c(2,7,11,17,23)]
names(outcomeTrimmed) <- c("HospitalName","State","HeartAttack","HeartFailure","Pneumonia")
outcomeTrimmed$HeartAttack <- as.numeric(outcomeTrimmed$HeartAttack)
outcomeTrimmed$HeartFailure <- as.numeric(outcomeTrimmed$HeartFailure)
outcomeTrimmed$Pneumonia <- as.numeric(outcomeTrimmed$Pneumonia)
## Check that state and outcome are valid
if (length(outcomeTrimmed$State[outcomeTrimmed$State==state]) == 0) {
return(stop("invalid state"))  }
if (outcome != 'heart attack' && outcome != 'heart failure' && outcome != 'pneumonia') {
return(stop("invalid outcome"))
}
## Return hospital name in that state with the lowest 30-day death rate
## Trim and sort
outcomeTrimmed <- subset(outcomeTrimmed, State == state)
if (outcome == 'heart attack') {
outcomeTrimmed <- outcomeTrimmed[,c(1,2,3)]
outcomeTrimmed <- na.omit(outcomeTrimmed)
outcomeTrimmed <- outcomeTrimmed[order(outcomeTrimmed$HeartAttack,outcomeTrimmed$HospitalName),]
return(outcomeTrimmed[1,1])
}
if (outcome == 'heart failure') {
outcomeTrimmed <- outcomeTrimmed[,c(1,2,4)]
outcomeTrimmed <- na.omit(outcomeTrimmed)
outcomeTrimmed <- outcomeTrimmed[order(outcomeTrimmed$HeartFailure,outcomeTrimmed$HospitalName),]
return(outcomeTrimmed[1,1])
}
if (outcome == 'pneumonia') {
outcomeTrimmed <- outcomeTrimmed[,c(1,2,5)]
outcomeTrimmed <- na.omit(outcomeTrimmed)
outcomeTrimmed <- outcomeTrimmed[order(outcomeTrimmed$Pneumonia,outcomeTrimmed$HospitalName),]
return(outcomeTrimmed[1,1])
}
} # End of function.
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
# Set Working Directory
setwd("~/GitHub/RProgramming3/")
#  This assignment will be graded using unit tests executed via the submit script that you run on your computer. To obtain the submit script, run the following code in R:
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
#   Or you can download the script to your working directory (NOTE: You may need to rename the script to be "submitscript3.R"). Then source it locally via
#   source("submitscript3.R")
#   The first time you run the submit script it will prompt you for your Submission login and Submission password.
#   These can be found at the top of the Programming Assignments page. To execute the submit script, type
submit()
submit()
submit()
